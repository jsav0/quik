#!/bin/sh
#
# quik - mispelt script for deploying vps' quikly
# 
# Digital Ocean supported with doctl, auth via $DO_TOKEN
# Vultr supported with vultr, auth via $VULTR_API_KEY

# Copyright (c) 2020 jsavage <wfnintr@null.net> (wfnintr.net)
# Copyright (c) 2020 haydenh <hayden@haydenvh.com> (gopher://haydenvh.com)
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# This work is free. You can redistribute it and/or modify it under the      
# terms of the Do What The Fuck You Want To Public License, Version 2,       
# as published by Sam Hocevar. See http://www.wtfpl.net/ for more details.   

export LC_CTYPE=C

echo(){
	printf "%s\n" "$@"
}

usage(){
	case $1 in
		vultr)
			printf "usage:\n"
			printf "  quik vultr <command> <options>\n\n"
			printf "commands:\n"
			printf "  deploy\tdeploy servers\n"
			printf "  ls\t\tshow all servers\n"
			printf "  rm\t\tdelete servers\n\n"
			printf "example:\n"
			printf "  quik vultr deploy 201 .. .. .. \t\tdeploy 10 servers running void linux\n"
			printf "  quik doctl deploy 1gb 10 void-linux\t\tdeploy 10 servers running void linux\n"
			exit 1
			;;
		doctl)
			printf "usage:\n"
			printf "  quik doctl <command> <options>\n\n"
			printf "commands:\n"
			printf "  deploy\tdeploy servers\n"
			printf "  ls\t\tshow servers\n"
			printf "  rm\t\tremove servers\n\n"
			printf "examples:\n"
			printf "deploy 10 digital ocean droplets running void linux:\n"
			printf "  quik doctl deploy 1gb 10 void-linux\n"
			exit 1
			;;
		*)
			printf "quik is a script for deploying vps' quickly\n\nusage:\n"
			printf "  quik <command>\n"
			printf "  quik <provider> <command> <options>\n\n"
			printf "quik commands:\n"
			printf "  ls\t\tlist servers\n"
			printf "  rm\t\tremove servers\n\n"
			printf "providers:\n"
			printf "  doctl\t\tDigtal Ocean\n"
			printf "  vultr\t\tVultr\n\n"
			printf "provider commands:\n"
			printf "  deploy\tdeploy servers\n"
			printf "  rm\t\tremove servers\n"
			printf "  ls\t\tlist servers\n\n"
			printf "examples:\n"
			printf "  quik doctl deploy 1gb 10 void-linux\tdeploy 10 instances running void linux\n"
			exit 1
			;;
	esac

}

find_ssh_key() {
	[ -z $1 ] && {
		ssh_key="$(find ~/.ssh/ -type f -name '*.pub' 2>/dev/null | head -n1)"
	}

	[ -z "$1" ] && [ -z "$ssh_key" ] && {
		printf "no ssh key found\n" && exit 1
	}
}

vultr_auth(){
	# note: assumes authorization is done via $VULTR_API_KEY
	[ -z $VULTR_API_KEY ] && {
		printf "error: \$VULTR_API_KEY is not set.\n"
		exit 1
	} || return 0
}

vultr_list(){
	case $1 in
		new) vultr servers | awk '$2 == "pending" {print $3}' ;;
		--help) printf "usage: \n $pname vultr ls <[all]|new>\n" ;;
		*) vultr servers | tail -n+2 | tr ' ' '-' | awk 'BEGIN { 
			OFS="\t"
			print "Status\tName\tPublicIPv4\tRegion\tVCPUs\tMemory\tImage"
		   } 
	   	   {print $2, $4, $3, $6, $7, $8, $5}' | column -t
		   ;;
	esac
}

vultr_deploy(){
	check=$(echo $@ | awk '$NF == "--check" {print "1"}')
	case $1 in
		-l) shift
		    case $1 in
				plans|sizes|types) vultr plans && exit 0;;
				images|distros|os) vultr os && exit 0;;
				regions) vultr regions ** exit 0;;
				*) printf "Show available instance plans, types and images\n\n"
				   printf "usage: \n $pname vultr deploy -l <option>\n\n" 
				   printf "options: \n"
				   printf " <plans|sizes|types>\tlist available plans with instance sizes and costs, VPSPLANID\n"
				   printf " <images|distros|os>\tlist available OS images, OSID\n"
				   printf " <regions>\t\tlist available regions, REGIONID, defaults to New Jersey, USA\n\n"
				   exit 0
				   ;;
		    esac
		    ;;

		*) continue ;;
	esac

	[ "$#" -lt "3" ] && {
		printf "$pname vultr deploy - deploy an instance using vultr, quickly\n\n"
		printf "usage:\n  $pname vultr deploy <VPSPLANID> <number of instances> <OSID> <REGIONID>\n\n"
		printf "For VPSPLANID, REGIONID and OSID, see '$pname vultr deploy -l'\n\n"
		printf "example:\n  $pname vultr deploy -l\n"
		printf "  $pname vultr deploy 201 1 412\n"
		exit 1
	}

	VPSPLAN_ID="$1"
	instances=$2

	echo $4 | grep -q '[[:digit:]]' && {
		REGION_ID=$4
	} || {
		REGION_ID=1
		# uncomment below for random region instead, NOTE: not all images are available in all regions
		#REGION_ID=$(vultr regions | awk '{print $1}' | tail-n+2 | sort -r | head -n1)
	}

	find_ssh_key
	SSHKEY_ID=$(vultr sshkey create --name="$USER" --file="$ssh_key" | grep "$USER" | awk '{print $1}' | head -n1)

	OS_ID=$(vultr os | awk "/$3/"'{print $1}')
	echo "$OS_ID" | grep -q '[[:digit:]]' || {
		vultr os
		exit
	}


	for void in $(seq ${instances:-1})
	do
		(
			NAME="$3-$(head -c 1000 /dev/urandom | tr -dc 'A-Za-z0-9' | head -n 1 | cut -c-10 | tr -d '\n')"

			# check vars enabled
			[ "$check" = "1" ] && {
				echo "VPS Plan ID: $VPSPLAN_ID"
				echo "OS ID: $OS_ID"
				echo "num of instances: $instances"
				echo "Region ID: $REGION_ID"
				echo "SSH Key: $SSHKEY_ID"
				echo "Name: $NAME"
				echo "vultr server create --name="$NAME" --hostname="quikhost" --os="$OS_ID" --plan="$VPSPLAN_ID" --region="$REGION_ID" --sshkey="$SSHKEY_ID""
				exit 0
			}

			vultr server create --name="$NAME" --hostname="quikhost" --os="$OS_ID" --plan="$VPSPLAN_ID" --region="$REGION_ID" --sshkey="$SSHKEY_ID" 1>/dev/null

		) &
	done
	sleep 8 #!was 20, sometimes the IPs are slow to come up
	vultr_list new && printf "\n\nPlease wait a few moments before logging in, to allow the sshd(s) to start, and ssh key(s) to be copied over.\n"
}

vultr_remove(){
        [ -z "$1" ] && {
		printf "quik vultr rm - remove an instance, quickly\n\n"
		vultr_list
		printf "\nusage:\n  $pname vultr rm <name|ip|all>"
	}

	case $1 in
		all) list=$(vultr servers | awk '$1 != "SUBID" {print $1}')
			for server in $list
			do
				echo "Deleting $server..."
				vultr server delete "$server" -f &
			done
			;;

		*) for nameip in $@
			do
				name=$(vultr servers | awk '{print $1 " " $3 " " $4}' | awk "\$2 == \"$nameip\" || \$3 == \"$nameip\""' {print $1}')
				[ "$name" != "" ] && vultr server delete "$name" -f || echo "$(tput bold)error:$(tput sgr0) no server has name/ip: $nameip"
			done
			;;
	esac
}


doctl_auth(){
	# note: assumes authorization is done via $DO_TOKEN
	[ -z $DO_TOKEN ] && {
		printf "warn: \$DO_TOKEN is not set.\n"
		doctl auth init 2>&1 | grep -q 'Using token' 2>&1 > /dev/null && {
			return 0 # access token already found
		} || exit 1
	} || {
		doctl auth init -t "$DO_TOKEN" > /dev/null
	}
}

doctl_list(){
	case $1 in
		new) doctl compute droplet list --format Status,PublicIPv4 | awk '$1 == "new" {print $2}' ;;
		--help) printf "usage: \n $pname doctl ls <[all]|new>\n" ;;
		*) doctl compute droplet list --format Status,Name,PublicIPv4,Region,VCPUs,Memory,Image | tail -n+2 | awk 'BEGIN { 
			OFS="\t"
			print "Status\tName\tPublicIPv4\tRegion\tVCPUs\tMemory\tImage"
		   } 
	   	   {print $1, $2, $3, $4, $5, $6, $7}' | column -t
		   ;;
	esac
}

doctl_deploy(){
	verbose=$(echo $@ | awk '$NF == "--verbose" {print "1"}')
	
	case $1 in
		-l) shift
		    case $1 in
				slugs|plans|sizes|types) doctl compute size list && exit 0;;
				images|distros|os) doctl compute image list --public && exit 0;;
				regions)  ** exit 0;;
				*) printf "Show available instance types (slugs) and images\n\n"
				   printf "usage: \n $pname doctl deploy -l <option>\n\n" 
				   printf "options: \n"
				   printf " <slugs|plans|sizes|types>\t\tlist available plans with instance sizes and costs, slug\n"
				   printf " <images|distros|os>\tlist available OS images, image\n"
				   printf " <regions>\t\tlist available regions, defaults to New Jersey, USA\n\n"
				   exit 0 ;;
		    esac
		    ;;

		*) continue ;;
	esac

	[ "$#" -lt "3" ] && {
		printf "quik doctl deploy - deploy an instance using doctl, quickly\n\n"
		printf "usage:\n  $pname doctl deploy <size-slug> <number of instances> <os> [/path/to/sshpubkey]\n\n"
		printf "EXAMPLE:\n  $pname doctl deploy 1gb 1 void-linux\n"
		exit 1
	}

	size_slug="$1"
	instances=$2

	doctl_deploy -l slugs | awk '{if (NR != 1) {print $1}}' | grep -q "^"$size_slug"$" || {
		doctl_deploy -l slugs 
		printf "slug incorrect. please select a valid instance type. See $pname doctl deploy -l slugs.\n"
		exit
	}


	find_ssh_key "$4"
	doctl compute ssh-key import "$USER" --public-key-file "$ssh_key" > /dev/null 2>&1
	ssh_key=$(doctl compute ssh-key list | grep "$USER" | awk '{print $3}')

	image_id=$(doctl compute image list --public | awk "/$3/"'{print $1}')
	echo "$image_id" | grep -q '[[:alnum:]]' || {
		doctl compute image list --public
		exit
	}


	for void in $(seq ${instances:-1})
	do
		(
			name="$3-$(head -c 1000 /dev/urandom | tr -dc 'A-Za-z0-9' | head -n 1 | cut -c-10 | tr -d '\n')"

			region=nyc1
			# uncomment below for random region instead, NOTE: not all images are available in all regions
			# doctl compute region ls --no-header | grep true | awk '{print $1}' | sort -r | head -n1

			doctl compute droplet create "$name" --image "$image_id" --size "$size_slug" --region "$region" --ssh-keys "$ssh_key" 1>/dev/null
			[ "$verbose" = "1" ] && printf '\ncreating instance %s in region %s' "$name" "$region"
		) &
	done
	sleep 5 #!was 20, sometimes the IPs are slow to come up
	[ "$verbose" = "1" ] && {
		printf "\n\n"
		doctl_list all
		printf "\n\nPlease wait a few moments before logging in, to allow the sshd(s) to start, and ssh key(s) to be copied over.\n"
	} || {
		doctl_list new
	}
}	

doctl_remove(){
        [ -z "$1" ] && {
		printf "quik doctl rm - remove an instance, quickly\n\n"
		quik_list_all
		printf "\nusage:\n  $pname doctl rm <name|ip|all>"
	}

	case $1 in
		all) list=$(doctl compute droplet ls --format Name | awk '$1 != "Name"')
			for droplet in $list
			do
				echo "Deleting $droplet..."
				doctl compute droplet d "$droplet" -f &
			done
			;;

		*) for nameip in $@
			do
				name=$(doctl compute droplet ls --format Name,PublicIPv4 | awk "\$1 == \"$nameip\" || \$2 == \"$nameip\""' {print $1}')
				[ "$name" != "" ] && doctl compute droplet d "$name" -f || echo "$(tput bold)error:$(tput sgr0) no droplet has name/ip: $nameip"
			done
			;;
	esac
}

quik_list_all(){
	vultr_list
	printf "\n--\n\n"
	doctl_list
}

quik_remove(){
        [ -z "$1" ] && {
		printf "quik rm - remove an instance, quickly\n\n"
		#quik_list_all
		printf "usage:\n  $pname rm <name|ip|>"
	}

	case $1 in
		all) vultr_list=$(vultr servers | awk '$1 != "SUBID" {print $1}')
			for server in $vultr_list
			do
				echo "Deleting $server..."
				vultr server delete "$server" -f &
			done

		     doctl_list=$(doctl compute droplet ls --format Name | awk '$1 != "Name"')
			for droplet in $doctl_list
			do
				echo "Deleting $droplet..."
				doctl compute droplet d "$droplet" -f &
			done
			;;

		*) for nameip in $@
			do
				name=$(vultr servers | awk '{print $1 " " $3 " " $4}' | awk "\$2 == \"$nameip\" || \$3 == \"$nameip\""' {print $1}')
				[ "$name" != "" ] && {
					vultr server delete "$name" -f
				} || {
					name=$(doctl compute droplet ls --format Name,PublicIPv4 | awk "\$1 == \"$nameip\" || \$2 == \"$nameip\""' {print $1}')
					[ "$name" != "" ] && {
						doctl compute droplet d "$name" -f
					} || {
						echo "$(tput bold)error:$(tput sgr0) doctl: no droplet has name/ip: $nameip"
						echo "$(tput bold)error:$(tput sgr0) vultr: no server has name/ip: $nameip"
					}
				}
			done
			;;
	esac
}

vultr_main(){
	command -v vultr >/dev/null || {
		echo "This requires the Vultr CLI utility in \$PATH. Install it and try again."
		exit 1
	}

	vultr_auth

	case "$1" in
		auth) vultr_auth ;;

		deploy) shift
			vultr_deploy $@ ;;

		ls) shift
		    vultr_list $@ ;;

		rm) shift
		    vultr_remove $@ ;;

		--help|* ) usage vultr ;;
	esac
}


doctl_main(){
	command -v doctl >/dev/null || {
		echo "This requires the Digital Ocean CLI utility (doctl) in \$PATH. Install it and try again."
		exit 1
	}

	case "$1" in
		auth) shift
		      doctl_auth ;;

		deploy) shift
			doctl_deploy $@ ;;

		ls) shift
		    doctl_list $@ ;;

		rm) shift
		    doctl_remove $@ ;;

		--help|*) usage doctl ;;
	esac
}

#BEGIN
pname=$(basename $0)
[ -z $1 ] && usage
cmd="$1" && shift
case "$cmd" in
	vultr) vultr_main $@;; # enter vultr main wrapper
	doctl) doctl_main $@;; # enter doctl main wrapper
	rm) quik_remove $@ ;; # search all providers and remove instance by IP or NAME
	ls) quik_list_all;; # list all servers on all providers
	*) usage ;; # print quik's usage
esac
